import fs from 'fs/promises';
import path from 'path';

function formatHumanDate(isoString) {
  const date = new Date(isoString);
  const options = {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  };
  return date.toLocaleString('en-US', options); // –∏–ª–∏ 'ru-RU' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
}

async function formatHistory() {
  try {
    const jsonPath = path.resolve('./HISTORY.json');
    const prevJsonPath = path.resolve('./DATA/HISTORY.prev.json');
    const mdPath = path.resolve('./DATA/HISTORY.md');

    let prevUpdatedAt = null;

    // 1Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è updatedAt
    try {
      const prevData = await fs.readFile(prevJsonPath, 'utf-8');
      const prevHistory = JSON.parse(prevData);
      prevUpdatedAt = prevHistory.updatedAt;
    } catch {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ä–æ–≥–æ HISTORY.prev.json –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    // 2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π HISTORY.json (–±–µ–∑ updatedAt)
    const jsonData = await fs.readFile(jsonPath, 'utf-8');
    const history = JSON.parse(jsonData);

    // 3Ô∏è‚É£ –ë–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ (—Ç.–∫. updatedAt –Ω–µ—Ç –≤ HISTORY.json)
    const currentISODate = new Date().toISOString();

    // 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è—è updatedAt —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    const historyWithDate = {
      ...history,
      updatedAt: currentISODate,
    };
    await fs.writeFile(
      prevJsonPath,
      JSON.stringify(historyWithDate, null, 2),
      'utf-8'
    );
    console.log(
      'üì¶ –°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π HISTORY.prev.json —Å updatedAt –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.'
    );

    // 5Ô∏è‚É£ –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ updatedAt (prev vs current)
    if (prevUpdatedAt) {
      console.log(`üïí –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${prevUpdatedAt}`);
      console.log(`üÜï –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:      ${currentISODate}`);
    } else {
      console.log(`üÜï –¢–µ–∫—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${currentISODate}`);
    }

    // 6Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
    const humanDate = formatHumanDate(currentISODate);

    // 7Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è markdown —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    let markdown = `# Demonlist History\n\n_Last updated: ${currentISODate} (${humanDate})_\n\n`;

    history.list.forEach((level) => {
      markdown += `## #${level.place}: ${level.name}\n\n`;
      markdown += `- **ID**: ${level.id}\n`;
      markdown += `- **Description**: ${level.description}\n`;
      markdown += `- **Verifier**: ${level.verifier}\n`;
      markdown += `- **Holder**: ${level.holder}\n`;
      markdown += `- **Minimal Percent**: ${level.minimal_percent}%\n`;
      markdown += `- **Score**: ${level.score}\n\n`;
    });

    // 8Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º HISTORY.md
    await fs.writeFile(mdPath, markdown, 'utf-8');

    console.log('‚úÖ HISTORY.md —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log(`‚ÑπÔ∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${history.list.length}`);
    console.log(`üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏: ${mdPath}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HISTORY.md:', error);
  }
}

async function generateDiff() {
  try {
    const currJsonPath = path.resolve('./HISTORY.json');
    const prevJsonPath = path.resolve('./DATA/HISTORY.prev.json');

    let prevData = null;
    let prevDateISO = null;
    let prevDate = null;

    try {
      const rawPrev = await fs.readFile(prevJsonPath, 'utf-8');
      prevData = JSON.parse(rawPrev);
      prevDateISO = prevData.updatedAt;
      prevDate = new Date(prevDateISO);
    } catch (error) {
      console.warn(
        `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å prev JSON: ${error.message}`
      );
    }

    const currDataRaw = await fs.readFile(currJsonPath, 'utf-8');
    const currData = JSON.parse(currDataRaw);
    const currDate = new Date(); // now
    const currDateISO = currDate.toISOString();

    const prevLevels = prevData?.list ?? [];
    const currLevels = currData?.list ?? [];

    const prevHumanDate = prevDate ? formatHumanDate(prevDate) : '‚Äî';
    const currHumanDate = formatHumanDate(currDate);

    let markdown = `# Demonlist Changes\n\n`;
    markdown += `_Compared: ${
      prevDateISO ?? 'N/A'
    } ‚Üí ${currDateISO} (${prevHumanDate} ‚Üí ${currHumanDate})_\n\n`;

    let hasChanges = false;

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ id
    currLevels.forEach((curr) => {
      const prev = prevLevels.find((p) => p.id === curr.id);
      if (prev) {
        const changes = [];

        if (curr.place !== prev.place)
          changes.push(`- **Place**: ${prev.place} ‚Üí ${curr.place}`);
        if (curr.verifier !== prev.verifier)
          changes.push(`- **Verifier**: ${prev.verifier} ‚Üí ${curr.verifier}`);
        if (curr.holder !== prev.holder)
          changes.push(`- **Holder**: ${prev.holder} ‚Üí ${curr.holder}`);
        if (curr.minimal_percent !== prev.minimal_percent)
          changes.push(
            `- **Minimal Percent**: ${prev.minimal_percent}% ‚Üí ${curr.minimal_percent}%`
          );
        if (curr.score !== prev.score)
          changes.push(`- **Score**: ${prev.score} ‚Üí ${curr.score}`);

        if (changes.length > 0) {
          hasChanges = true;
          markdown += `## #${curr.place}: ${curr.name}\n`;
          markdown += changes.join('\n') + '\n\n';
        }
      }
    });

    // –ù–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    const added = currLevels.filter(
      (curr) => !prevLevels.some((p) => p.id === curr.id)
    );
    if (added.length > 0) {
      hasChanges = true;
      markdown += `## üÜï Added Levels\n\n`;
      added.forEach((level) => {
        markdown += `- **#${level.place}: ${level.name}** (ID: ${level.id})\n`;
      });
      markdown += '\n';
    }

    // –£–¥–∞–ª—ë–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    const removed = prevLevels.filter(
      (prev) => !currLevels.some((c) => c.id === prev.id)
    );
    if (removed.length > 0) {
      hasChanges = true;
      markdown += `## ‚ùå Removed Levels\n\n`;
      removed.forEach((level) => {
        markdown += `- **#${level.place}: ${level.name}** (ID: ${level.id})\n`;
      });
      markdown += '\n';
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!hasChanges) {
      markdown += `\n_–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –¥–∞—Ç–∞–º–∏._\n`;
    }

    const months = [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ];

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
    const year = currDate.getFullYear().toString();
    const monthIndex = currDate.getMonth(); // 0-11
    const monthNumber = String(monthIndex + 1).padStart(2, '0');
    const monthName = months[monthIndex];
    const day = String(currDate.getDate()).padStart(2, '0');

    // –ü—É—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
    const diffDir = path.resolve(
      `./DATA/diffs/${year}/${monthNumber}-${monthName}/${day}`
    );

    await fs.mkdir(diffDir, { recursive: true });

    const diffMdPath = path.join(diffDir, 'HISTORY.diff.md');

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    await fs.writeFile(diffMdPath, markdown, 'utf-8');

    console.log(`‚úÖ HISTORY.diff.md —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
    console.log(`üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏: ${diffMdPath}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HISTORY.diff.md:', error);
  }
}

generateDiff();
formatHistory();
